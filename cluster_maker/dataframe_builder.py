###
## cluster_maker
## A package to simulate clusters of data points.
## J. Foadi - University of Bath - 2024
##
## Module dataframe_builder
###

## Libraries needed
import pandas as pd
import numpy as np

## Function to define the wanted data structure
def define_dataframe_structure(column_specs):
    """
    Creates a dataframe based on the specified structure.
    The structure is defined by a list of dicts each containing the column name and data
    It then creates a data frame on this, padding columns with NaNs to match the longest column.

    Parameters:
        column_specs (list): A list of dictionaries, each containing the specifications for a column.
        
    Returns:
        pd.DataFrame: DataFrame with the specified structure.
    """
    # Prepare data dictionary
    data = {}
    max_length = 0

    # Find the maximum length of representative points
    for spec in column_specs:
        max_length = max(max_length, len(spec.get('reps', [])))

    for spec in column_specs:
        name = spec['name']
        reps = spec.get('reps', [])
        # Extend numerical columns with NaN to match max_length
        extended_points = reps + [np.nan] * (max_length - len(reps))
        data[name] = extended_points

    return pd.DataFrame(data)

## Function to simulate data
def simulate_data(seed_df, n_points=100, col_specs=None, random_state=None):
    """
    You need to provide colspecs to specify how to generate the data

    Simulate data points based on a seed DataFrame.
    The data points are generated by adding random noise to the seed points.

    column specs is a dictionary with column-specific specifications on how to generate the data,
    e.g 
    col_specs = {
        "X_1": {"distribution": "normal", "variance": 4},
        "X_2": {"distribution": "uniform", "variance": 2}
    }
    colspecs by defaul is normal with sd 1


    Parameters:
        seed_df (pd.DataFrame): Seed DataFrame containing the representative points.
        n_points (int): Number of data points to simulate per representative point (default: 100).
        col_specs (dict): Dictionary with column-specific specifications.
        random_state (int): Random seed for reproducibility (default: None).
    
    Returns:
        pd.DataFrame: Simulated DataFrame.
    
    """
    
    
    if random_state is not None:
        np.random.seed(random_state)
    
    simulated_data = []

    for _, representative in seed_df.iterrows():
        for _ in range(n_points):
            simulated_point = {}
            for col in seed_df.columns:
                # Numerical columns: apply column-specific specifications
                if col_specs and col in col_specs:
                    dist = col_specs[col].get('distribution', 'normal')
                    variance = col_specs[col].get('variance', 1.0)

                    if dist == 'normal':
                        simulated_point[col] = representative[col] + np.random.normal(0, np.sqrt(variance))
                    elif dist == 'uniform':
                        simulated_point[col] = representative[col] + np.random.uniform(-variance, variance)
                    else:
                        raise ValueError(f"Unsupported distribution: {dist}")
                else:
                    raise ValueError(f"Column {col} has no specifications in col_specs.")
            simulated_data.append(simulated_point)
    
    return pd.DataFrame(simulated_data)


def non_globular_cluster(seed_df, n_points=100, col_specs=None, random_state=None,random_function=np.random.normal,random_function_params={'loc':0,'scale':0.1}):
    """
    Simulate non-globular clusters based on a seed DataFrame.
    The data points are generated by adding the same transforamed random noise to each dimenation in the seed points.

    colspecs is a dictiory that contains a key of the column name and a function which is used to generate the data for that column
    you can use any function e.g in a 2d domain x_1 = x and x_2 = x^2 will gerneate a bowl shape
    Parameters:
        seed_df (pd.DataFrame): Seed DataFrame containing the representative points.
        n_points (int): Number of data points to simulate per representative point (default: 100).
        col_specs (dict): Dictionary with column-specific specifications.
        random_state (int): Random seed for reproducibility (default: None).
        random_function (function): Function to generate random data.
        random_function_params (dict): Parameters for the random function.
    
    Returns:
        pd.DataFrame: Simulated DataFrame.
    
    """
    try:
        if random_state is not None:
            np.random.seed(random_state)
        
        simulated_data = []

        for _, representative in seed_df.iterrows():
            for _ in range(n_points):
                simulated_point = {}
                random_data=random_function(**random_function_params)
                for col in seed_df.columns:
                    # Numerical columns: apply column-specific specifications
                    if col_specs and col in col_specs:
                        #get the function and the parameters
                        func = col_specs[col].get('func', lambda x: x)
                        func_params = col_specs[col].get('func_params', None)

                        #apply the function to the random data and add to the representative point
                        if func_params is not None:
                            simulated_point[col] = representative[col]+func(random_data, func_params)
                        else:
                            simulated_point[col] = representative[col]+func(random_data)
                        
                            
                    else:
                        raise ValueError(f"Column {col} has no specifications in col_specs.")
                simulated_data.append(simulated_point)
        
        return pd.DataFrame(simulated_data)
    except Exception as e:
        print(f"Error simulating non-globular cluster: {e}")
        return None
    
